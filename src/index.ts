import { app, BrowserWindow, ipcMain, Menu, screen, Tray } from 'electron';
import isDev from "electron-is-dev";

import path from 'path';
// This allows TypeScript to pick up the magic constant that's auto-generated by Forge's Webpack
// plugin that tells the Electron app where to look for the Webpack-bundled app code (depending on
// whether you're running in development or production).
declare const MAIN_WINDOW_WEBPACK_ENTRY: string;
declare const MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY: string;

// Handle creating/removing shortcuts on Windows when installing/uninstalling.
if (require('electron-squirrel-startup')) {
  // eslint-disable-line global-require
  app.quit();
}

let tray: Tray = undefined;
let win: BrowserWindow = undefined;
let closeTime = +new Date();

// const createWindow = (): void => {
//   // Create the browser window.
//   const mainWindow = new BrowserWindow({
//     height: 600,
//     width: 800,
//   });
//
//   // and load the index.html of the app.
//   mainWindow.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
//
//   // Open the DevTools.
//   mainWindow.webContents.openDevTools();
// };
//
// // This method will be called when Electron has finished
// // initialization and is ready to create browser windows.
// // Some APIs can only be used after this event occurs.
// app.on('ready', createWindow);
//
// // Quit when all windows are closed, except on macOS. There, it's common
// // for applications and their menu bar to stay active until the user quits
// // explicitly with Cmd + Q.
// app.on('window-all-closed', () => {
//   if (process.platform !== 'darwin') {
//     app.quit();
//   }
// });
//
// app.on('activate', () => {
//   // On OS X it's common to re-create a window in the app when the
//   // dock icon is clicked and there are no other windows open.
//   if (BrowserWindow.getAllWindows().length === 0) {
//     createWindow();
//   }
// });

// In this file you can include the rest of your app's specific main process
// code. You can also put them in separate files and import them here.

const getWindowPosition = () => {
  const windowBounds = win.getBounds();
  const trayBounds = tray.getBounds();

  let x = Math.round(trayBounds.x + trayBounds.width / 2 - windowBounds.width / 2);

  const screenWidth = screen.getPrimaryDisplay().workAreaSize.width;
  const screenHeight = screen.getPrimaryDisplay().workAreaSize.height;

  x = Math.max(3, Math.min(x, screenWidth - windowBounds.width - 3));

  let y;

  if (trayBounds.y > screenHeight / 2) {
    y = Math.round(trayBounds.y - windowBounds.height - 3);
  } else {
    y = Math.round(trayBounds.y + trayBounds.height + 3);
  }

  return { x: x, y: y };
};

const createWindow = (): void => {
  win = new BrowserWindow({
    width: 700,
    height: 602,
    show: false,
    frame: false,
    fullscreenable: false,
    resizable: false,
    transparent: false,
    webPreferences: {
      preload: MAIN_WINDOW_PRELOAD_WEBPACK_ENTRY,
      // preload: path.join(__dirname, 'renderer.js'),
      // nodeIntegrationInSubFrames: true,
      webviewTag: true,
      nodeIntegration: true,
      contextIsolation: false,
    },
    icon: path.join(__dirname, 'icons', 'jira.png'),
  });

  win.setAlwaysOnTop(true, 'normal');

  win.setMenuBarVisibility(false);

  win.loadURL(MAIN_WINDOW_WEBPACK_ENTRY);
  win.webContents.openDevTools();

  win.on('blur', () => {
    // win.hide();
  });

  win.on('hide', () => {
    closeTime = +new Date();
  });

  win.on('closed', () => {
    win = null;
  });
};

const showWindow = () => {
  const position = getWindowPosition();
  win.setPosition(position.x, position.y, false);
  win.show();
  win.focus();
};

// ipcMain.on('show-window', () => {
//   showWindow();
// });

const createTray = () => {
  const icon = isDev
    ? path.join(__dirname, "../../src/icons/clock.png")
    : path.join(__dirname, "./icons/clock.png")

  tray = new Tray(icon);
  tray.on('click', function () {
    if (+new Date() - closeTime > 200) {
      showWindow();
    }
  });

  const contextMenu = Menu.buildFromTemplate([{ label: 'Exit', type: 'normal', role: 'quit' }]);
  tray.setContextMenu(contextMenu);
};

app.on('ready', () => {
  try {
    createTray();
    createWindow();
  } catch (e) {
    console.log(e);
  }
});

app.on('activate', () => {
  if (BrowserWindow.getAllWindows().length === 0) {
    createWindow();
  }
});

app.on('window-all-closed', () => {
  if (process.platform !== 'darwin') {
    app.quit();
  }
});

// app.on('browser-window-focus', (event, win) => {
//   win.webContents.send('focus');
// });
//
// app.on('browser-window-blur', (event, win) => {
//   win.webContents.send('blur');
// });

ipcMain.on('timeOver', (event, win) => {
  // win.webContents.send('blur');
  console.log('EEEEEEEEEEE');
  showWindow();
});
